{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/** Base class with all of the `MatTabHeader` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabHeaderBase extends MatPaginatedTabHeader implements\n  AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy {\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderBase {\n  @ContentChildren(MatTabLabelWrapper) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusableOption} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatInkBar} from '../ink-bar';\nimport {MatPaginatedTabHeader, MatPaginatedTabHeaderItem} from '../paginated-tab-header';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Base class with all of the `MatTabNav` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabNavBase extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, OnDestroy {\n\n  /** Query list of all tab links of the tab navigation. */\n  abstract _items: QueryList<MatPaginatedTabHeaderItem & {active: boolean}>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Theme color of the nav bar. */\n  @Input() color: ThemePalette = 'primary';\n\n  constructor(elementRef: ElementRef,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              /**\n               * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n               */\n              @Optional() platform?: Platform,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected() {\n    // noop\n  }\n\n  ngAfterContentInit() {\n    // We need this to run before the `changes` subscription in parent to ensure that the\n    // selectedIndex is up-to-date by the time the super class starts looking for it.\n    this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this.updateActiveLink();\n    });\n\n    super.ngAfterContentInit();\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(_element?: ElementRef) {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n        this._changeDetectorRef.markForCheck();\n        return;\n      }\n    }\n\n    // The ink bar should hide itself if no items are active.\n    this.selectedIndex = -1;\n    this._inkBar.hide();\n  }\n}\n\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    'class': 'mat-tab-nav-bar mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavBase {\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true}) _items: QueryList<MatTabLink>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(elementRef: ElementRef,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    /**\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n     */\n    @Optional() platform?: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode);\n  }\n}\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkMixinBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkMixinBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkMixinBase)));\n\n/** Base class with all of the `MatTabLink` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatTabLinkBase extends _MatTabLinkMixinBase implements OnDestroy, CanDisable,\n  CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this.elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: _MatTabNavBase, public elementRef: ElementRef,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n\n    _focusMonitor.monitor(elementRef);\n  }\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active ? \"page\" : null',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkBase implements OnDestroy {\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  constructor(\n    tabNavBar: MatTabNav, elementRef: ElementRef, ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n    @Attribute('tabindex') tabIndex: string, focusMonitor: FocusMonitor,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode);\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_supportsShadowDom} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {MatAutocomplete} from './autocomplete';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'class': 'mat-autocomplete-trigger',\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges,\n  OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._element.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n               fromEvent(this._document, 'click') as Observable<MouseEvent>,\n               fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input() typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this.typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/** Base class with all of the `MatTabBody` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabBodyBase implements OnInit, OnDestroy {\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  abstract _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  }\n})\nexport class MatTabBody extends _MatTabBodyBase {\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              @Optional() dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupMixinBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupMixinBase =\n    mixinColor(mixinDisableRipple(MatTabGroupMixinBase), 'primary');\n\ninterface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab: () => void;\n  focusIndex: number;\n}\n\n/** Base class with all of the `MatTabGroupBase` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabGroupBase extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n  abstract _tabs: QueryList<MatTab>;\n  abstract _tabBodyWrapper: ElementRef;\n  abstract _tabHeader: MatTabGroupBaseHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupBase {\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabGroupBaseHeader;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n */\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit,\n  AfterViewInit, OnDestroy {\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void, alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              /**\n               * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n               * parameters to become required.\n               */\n              private _platform?: Platform,\n              public _animationMode?: string) {\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        this._itemSelected(event);\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) { return true; }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem = this._items && this._items.length ?\n        this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value!);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n      takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      const className = 'mat-snack-bar-handset';\n      state.matches ? classList.add(className) : classList.remove(className);\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} – ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    );\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    const manager = this._keyManager;\n\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => manager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      manager.setFocusOrigin(origin).setFirstItemActive();\n    }\n\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n\n    this._restoreFocus();\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /** Restores focus to the element that was focused before the menu was open. */\n  private _restoreFocus() {\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    @Optional() private readonly _errorHandler?: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            // @breaking-change 9.0.0 _errorHandler parameter to be made required\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any,\n  errorHandler?: ErrorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), ErrorHandler],\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._state = MatDialogState.CLOSED;\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n    this._state = MatDialogState.CLOSING;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n              private _changeDetectorRef?: ChangeDetectorRef) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  private _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatButton` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    this._getHostElement().focus(options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the bottom sheet already, because it's possible that the\n      // consumer turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOptions, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.2.0');\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from its utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.2.0');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","Optional","Inject","args","ANIMATION_MODULE_TYPE","MatTabHeader","propDecorators","_tabListContainer","ViewChild","static","_tabList","_nextPaginator","_previousPaginator","_MatTabNavBase","_super","elementRef","dir","ngZone","changeDetectorRef","viewportRuler","platform","animationMode","_this","call","this","_disableRipple","color","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","classList","_elementRef","nativeElement","remove","backgroundColor","add","coerceBooleanProperty","_itemSelected","ngAfterContentInit","_items","changes","pipe","startWith","takeUntil","_destroyed","subscribe","updateActiveLink","_element","items","toArray","i","length","active","selectedIndex","_changeDetectorRef","markForCheck","_inkBar","hide","ElementRef","Directionality","decorators","NgZone","ChangeDetectorRef","ViewportRuler","Platform","String","Input","disableRipple","MatPaginatedTabHeader","MatTabNav","Component","selector","exportAs","inputs","template","styles","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","MatTabLinkMixinBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_MatTabLinkBase","_tabNavBar","globalRippleOptions","tabIndex","_focusMonitor","parseInt","rippleConfig","animation","enterDuration","exitDuration","monitor","get","_isActive","enumerable","configurable","disabled","ctorParameters","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabLink","tabNavBar","focusMonitor","_tabLinkRipple","RippleRenderer","setupTriggerEvents","_removeTriggerEvents","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","Array","from","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","_MatTreeNodeMixinBase","CdkTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","_tabIndex","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","MatTableDataSource","_filter","_sort","sort","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","_internalPageChanges","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","_renderChangesSubscription","unsubscribe","_renderData","obj","filterPredicate","_updatePaginator","sortData","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_MatTabBodyBase","_dir","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","Output","animations","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupMixinBase","_MatTabGroupMixinBase","_MatTabGroupBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceNumberProperty","_animationDuration","test","ngAfterContentChecked","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","tab","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_alignInkBarToSelectedTab","_focusChanged","max","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","focusIndex","_getTabIndex","idx","dynamicHeight","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_viewportRuler","_scrollDistance","_selectedIndexChanged","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","selectFocusedIndex","indexFocused","fromEvent","_stopInterval","_keyManager","updateActiveItemIndex","_handlePaginatorPress","dirChange","resize","realign","updatePagination","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","onKeydown","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","containerEl","scrollLeft","scrollWidth","scrollDistance","translateX","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","timer","maxScrollDistance","distance","_MatTabHeaderBase","outputs","_setAnimationTransitionState","_arrowDirection","MatSortHeader","viewState","_viewState","_disableViewStateAnimation","_isDisabled","_isSorted","_showIndicatorHint","id","_getArrowDirectionState","_getArrowViewState","_updateArrowDirection","start","_getAriaSortAttribute","_renderArrow","(click)","(mouseenter)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","stopMonitoring","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","ContentChildren","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","backgroundSize","axis","sign","tickSize","rotate","_isMinValue","_thumbGap","vertical","_invertAxis","MatSlider","_getDirection","percent","_shouldInvertMouseCoords","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","options","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","HandsetPortrait","detachments","overlayElement","matches","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_setIndicatorHintVisible","visible","openedVia","_opened","isOpen","_enableAnimations","_openedVia","_restoreFocus","_updateFocusTrapState","MatDrawer","_focusTrap","enabled","_isFocusTrapEnabled","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-drawer-opened]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","backdropClick","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","className","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","NG_VALIDATORS","MatSlideToggleRequiredValidator","CheckboxRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","scale","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_noopAnimations","_forceAnimations","diameter","strokeWidth","_styleRoot","_attachStyleNode","_strokeWidth","newValue","_getShadowRoot","animationClass","viewBox","_circleRadius","PI","_strokeCircumference","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-describedby]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_trapFocus","_animationEnd","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","destroy","_animationStarted","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","typeaheadDebounceInterval","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(longpress)","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","Handset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_setIsMenuOpen","parentMenu","_setMenuElevation","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","withTypeAhead","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","find","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","_updateDirectDescendants","_item","setFocusOrigin","parentElement","getAttribute","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_allItems","reset","notifyOnChanges","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_containsFocus","accordion","_handleHeaderFocus","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_animationsDisabled","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","handleError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","attributes","name_1","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ErrorHandler","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","match","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_body","focusedElement","bodyElement","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","[required]","[attr.readonly]","MatInput","AutofillMonitor","readonly","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","MatChipList","_clearSelection","chips","chip","correspondingChip","selectViaInteraction","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","getState","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","splice","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","[attr.type]","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","coercedValue","_dispatchSelectionChange","tagName","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","BUTTON_HOST_ATTRIBUTES","DEFAULT_ROUND_BUTTON_COLOR","_origin","attribute","MatAnchor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_supportsShadowDom","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","composedPath","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","errorHandler","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","elementOrElementRef","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","coerceElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}